{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kbito\\\\Documents\\\\School\\\\ACT\\\\ACT\\\\Frontend\\\\src\\\\scenes\\\\dashboard\\\\watchlist.js\",\n  _s = $RefreshSig$();\n// import { Box, Typography, useTheme, Button } from \"@mui/material\";\n// import { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\n// import { tokens } from \"../../theme\";\n// import Icon from \"@mui/material/Icon\";\n// import { mockDataTeam } from \"../../data/mockData\";\n// import AdminPanelSettingsOutlinedIcon from \"@mui/icons-material/AdminPanelSettingsOutlined\";\n// import LockOpenOutlinedIcon from \"@mui/icons-material/LockOpenOutlined\";\n// import SecurityOutlinedIcon from \"@mui/icons-material/SecurityOutlined\";\n// import DeleteIcon from \"@mui/icons-material/Delete\";\n// import Header from \"../../components/Headers\";\n// // import { abc } from \"../../mockData\";\n// import { useEffect, useState, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// // import { useAuthContext } from \"../../hooks/useAuthContext.jsx\";\n// import AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\n// import { CleaningServices } from \"@mui/icons-material\";\n// import React from \"react\";\n\n// const Watchlist = () => {\n//   // const { user } = useAuthContext();\n//   const user = JSON.parse(localStorage.getItem(\"user\"));\n//   // console.log(user);\n//   const history = useNavigate();\n//   // const [abc, setAbc] = useState([]);\n//   const [rows, setRows] = useState([]);\n\n//   // const [rows: GridRowsProp, setRows] = React.useState([]);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   const url = \"http://localhost:8080/temp/\".concat(user.id);\n//   // console.log(url);\n\n//   const fetchData = async () => {\n//     let abc = [];\n//     const temp = [];\n\n//     await fetch(url)\n//       .then((response) => response.json())\n//       // .then((response) => setAbc(response));\n//       .then((response) => {\n//         response.map((d) => abc.push(d));\n//       });\n//     // console.log(abc);\n//     for (var key in abc) {\n//       if (!abc.hasOwnProperty(key)) continue;\n//       let newData = [];\n//       const url = \"https://finnhub.io/api/v1/quote?symbol=\".concat(\n//         abc[key].symbol,\n//         \"&token=ce80b8aad3i4pjr4v2ggce80b8aad3i4pjr4v2h0\"\n//       );\n//       await axios\n//         .get(url)\n//         .then((res) => {\n//           const pData = res.data;\n//           newData.push(pData);\n//         })\n//         .catch((err) => {\n//           console.log(err);\n//         });\n//       // console.log(newData);\n\n//       const ab = {\n//         id: abc[key]._id,\n//         name: abc[key].name,\n//         symbol: abc[key].symbol,\n//         delete: abc[key]._id,\n//         ids: abc[key]._id,\n//         today: newData[0][\"c\"],\n//         Percent: newData[0][\"dp\"] + \" %\",\n//         open: newData[0][\"o\"],\n//         high: newData[0][\"h\"],\n//         low: newData[0][\"l\"],\n//         close: newData[0][\"pc\"],\n//       };\n//       // console.log(pData[key].name)\n//       let flag = false;\n//       for (var k in temp) {\n//         if (temp[k].symbol === abc[key].symbol) {\n//           flag = true;\n//         }\n//       }\n//       if (!flag) {\n//         temp.push(ab);\n//       }\n//     }\n//     console.log(temp);\n//     const s = new Set(temp);\n//     // console.log(s);\n//     setRows(Array.from(s));\n//     // setIsLoading(false);\n//   };\n\n//   useEffect(() => {\n//     // abc = [];\n//     // temp = [];\n//     fetchData();\n//   }, []);\n\n//   const theme = useTheme();\n//   const colors = tokens(theme.palette.mode);\n//   const columns = [\n//     {\n//       field: \"name\",\n//       headerName: \" Company Name\",\n//       flex: 1,\n//       cellClassName: \"name-column--cell\",\n//     },\n//     {\n//       field: \"symbol\",\n//       headerName: \"Symbol\",\n//       flex: 0.5,\n//       cellClassName: \"symbol-column--cell\",\n//     },\n//     {\n//       field: \"ids\",\n//       headerName: \"ids\",\n//       hide: true,\n//       flex: 0.5,\n\n//       cellClassName: \"symbol-column--cell\",\n//     },\n\n//     {\n//       field: \"today\",\n//       headerName: \"Current Price\",\n//       flex: 0.5,\n//       type: \"number\",\n//       headerAlign: \"left\",\n//       align: \"left\",\n//     },\n//     {\n//       field: \"Percent\",\n//       headerName: \"Percent Chamge\",\n//       flex: 0.5,\n//       type: \"number\",\n//       headerAlign: \"left\",\n//       align: \"left\",\n//     },\n//     {\n//       field: \"open\",\n//       headerName: \"Open\",\n//       flex: 0.3,\n//       type: \"number\",\n//       headerAlign: \"left\",\n//       align: \"left\",\n//     },\n//     {\n//       field: \"high\",\n//       headerName: \"High\",\n//       flex: 0.3,\n//       type: \"number\",\n//       headerAlign: \"left\",\n//       align: \"left\",\n//     },\n//     {\n//       field: \"low\",\n//       headerName: \"Low\",\n//       flex: 0.3,\n//       type: \"number\",\n//       headerAlign: \"left\",\n//       align: \"left\",\n//     },\n//     {\n//       field: \"close\",\n//       headerName: \"Close\",\n//       flex: 0.3,\n//       type: \"number\",\n//       headerAlign: \"left\",\n//       align: \"left\",\n//     },\n\n//     {\n//       field: \"Buy\",\n//       headerName: \"Buy\",\n//       sortable: false,\n//       renderCell: (params) => {\n//         const Add = (e) => {\n//           e.stopPropagation(); // don't select this row after clicking\n\n//           const api: GridApi = params.api;\n//           const thisRow: Record<string, GridCellValue> = {};\n\n//           api\n//             .getAllColumns()\n//             .filter((c) => c.field !== \"__check__\" && !!c)\n//             .forEach(\n//               (c) => (thisRow[c.field] = params.getValue(params.id, c.field))\n//             );\n//           console.log(thisRow);\n//           history(\"/buyStock\", { state: thisRow });\n//           return;\n//         };\n\n//         return (\n//           <Button onClick={Add} variant=\"contained\" color=\"success\">\n//             Buy\n//           </Button>\n//         );\n//       },\n//     },\n//     {\n//       field: \"Sell\",\n//       headerName: \"Sell\",\n//       sortable: false,\n//       renderCell: (params) => {\n//         const Remove = (e) => {\n//           e.stopPropagation(); // don't select this row after clicking\n\n//           const api: GridApi = params.api;\n//           const thisRow: Record<string, GridCellValue> = {};\n\n//           api\n//             .getAllColumns()\n//             .filter((c) => c.field !== \"__check__\" && !!c)\n//             .forEach(\n//               (c) => (thisRow[c.field] = params.getValue(params.id, c.field))\n//             );\n\n//           // return alert(JSON.stringify(thisRow.name, null, 4));\n//           // return;\n//           console.log(thisRow);\n//           history(\"/sellStock\", { state: thisRow });\n//         };\n\n//         return (\n//           <Button onClick={Remove} variant=\"outlined\" color=\"error\">\n//             Sell\n//           </Button>\n//         );\n//       },\n//     },\n\n//     {\n//       field: \"Delete\",\n//       headerName: \"Delete\",\n\n//       sortable: false,\n//       renderCell: (params) => {\n//         const Delete = (e) => {\n//           e.stopPropagation(); // don't select this row after clicking\n\n//           const api: GridApi = params.api;\n//           const thisRow: Record<string, GridCellValue> = {};\n\n//           api\n//             .getAllColumns()\n//             .filter((c) => c.field !== \"__check__\" && !!c)\n//             .forEach(\n//               (c) => (thisRow[c.field] = params.getValue(params.id, c.field))\n//             );\n\n//           async function deleteRow() {\n//             await fetch(\"http://localhost:8080/temp/\".concat(thisRow.ids), {\n//               method: \"DELETE\",\n//             });\n//             for (var key in rows) {\n//               const a = rows[key];\n//               setRows((rows) => rows.filter((a) => a.ids != thisRow.ids));\n//             }\n//           }\n//           deleteRow();\n\n//           // console.log(thisRow);\n//           // return alert(\n//           //   JSON.stringify(thisRow.symbol, null, 4) + \" \" + \"Deleted\"\n//           // );\n//           // //\n//         };\n\n//         return <DeleteIcon onClick={Delete}></DeleteIcon>;\n//       },\n//     },\n//     {\n//       field: \"Details\",\n//       headerName: \"Details\",\n//       sortable: false,\n//       renderCell: (params) => {\n//         const Details = (e) => {\n//           e.stopPropagation(); // don't select this row after clicking\n\n//           const api: GridApi = params.api;\n//           const thisRow: Record<string, GridCellValue> = {};\n\n//           api\n//             .getAllColumns()\n//             .filter((c) => c.field !== \"__check__\" && !!c)\n//             .forEach(\n//               (c) => (thisRow[c.field] = params.getValue(params.id, c.field))\n//             );\n//           // console.log(thisRow);\n//           history(\"/details\", { state: thisRow });\n//           return;\n//         };\n\n//         return <AddCircleOutlineIcon onClick={Details}></AddCircleOutlineIcon>;\n//       },\n//     },\n//   ];\n\n//   return (\n//     <>\n//       {/* {isLoading && <h1>Loading Data...</h1>} */}\n//       <Box m=\"20px\">\n//         {/* <Header title=\"Watchlist\" /> */}\n//         <Header title=\"Watchlist\" subtitle=\"Watchlist\" />\n//         <Box\n//           m=\"40px 0 0 0\"\n//           height=\"75vh\"\n//           sx={{\n//             \"& .MuiDataGrid-root\": {\n//               border: \"none\",\n//             },\n//             \"& .MuiDataGrid-cell\": {\n//               borderBottom: \"none\",\n//             },\n//             \"& .name-column--cell\": {\n//               color: colors.greenAccent[300],\n//             },\n//             \"& .MuiDataGrid-columnHeaders\": {\n//               backgroundColor: colors.blueAccent[700],\n//               borderBottom: \"none\",\n//             },\n//             \"& .MuiDataGrid-virtualScroller\": {\n//               backgroundColor: colors.primary[400],\n//             },\n//             \"& .MuiDataGrid-footerContainer\": {\n//               borderTop: \"none\",\n//               backgroundColor: colors.blueAccent[700],\n//             },\n//             \"& .MuiCheckbox-root\": {\n//               color: `${colors.greenAccent[200]} !important`,\n//             },\n//           }}\n//         >\n//           {rows && (\n//             <DataGrid\n//               rows={rows}\n//               columns={columns}\n//               components={{ Toolbar: GridToolbar }}\n//             />\n//           )}\n//         </Box>\n//       </Box>\n//     </>\n//   );\n// };\n\n// export default Watchlist;\n\n//FIREBASE SETUP\nimport { Box, Typography, Button } from \"@mui/material\";\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\nimport { tokens } from \"../../theme\";\nimport { useTheme } from \"@mui/material\"; // Ensure this is imported\nimport Icon from \"@mui/material/Icon\";\nimport AdminPanelSettingsOutlinedIcon from \"@mui/icons-material/AdminPanelSettingsOutlined\";\nimport LockOpenOutlinedIcon from \"@mui/icons-material/LockOpenOutlined\";\nimport SecurityOutlinedIcon from \"@mui/icons-material/SecurityOutlined\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport Header from \"../../components/Headers\";\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { db } from \"../../firebaseConfig\"; // Import Firebase client config here\nimport { collection, getDocs, doc, deleteDoc } from \"firebase/firestore\"; // Firestore functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Watchlist = () => {\n  _s();\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const userId = user && user.uid; // Assuming `uid` is used instead of `id` for Firebase users\n  const [rows, setRows] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const history = useNavigate();\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n  const fetchData = async () => {\n    if (!userId) {\n      console.error(\"User ID is undefined\");\n      return;\n    }\n    try {\n      const watchlistRef = collection(db, \"temp\");\n      const snapshot = await getDocs(watchlistRef);\n      const watchlistData = await Promise.all(snapshot.docs.map(async doc => {\n        const item = {\n          id: doc.id,\n          ...doc.data()\n        };\n\n        // Fetch live stock data using the stock symbol\n        const stockUrl = `https://finnhub.io/api/v1/quote?symbol=${item.symbol}&token=your_finnhub_api_key`;\n        const stockResponse = await axios.get(stockUrl);\n        const stockData = stockResponse.data;\n        return {\n          id: item.id,\n          name: item.name,\n          symbol: item.symbol,\n          today: stockData.c,\n          Percent: stockData.dp + \" %\",\n          open: stockData.o,\n          high: stockData.h,\n          low: stockData.l,\n          close: stockData.pc\n        };\n      }));\n      setRows(watchlistData);\n    } catch (error) {\n      console.error(\"Error fetching watchlist data from Firebase:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Function to delete an item from Firestore\n  const deleteRow = async id => {\n    try {\n      await deleteDoc(doc(db, \"temp\", id));\n      setRows(rows.filter(row => row.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting item:\", error);\n    }\n  };\n\n  // Columns definition remains the same\n  const columns = [{\n    field: \"name\",\n    headerName: \"Company Name\",\n    flex: 1\n  }, {\n    field: \"symbol\",\n    headerName: \"Symbol\",\n    flex: 0.5\n  }, {\n    field: \"today\",\n    headerName: \"Current Price\",\n    flex: 0.5,\n    type: \"number\"\n  }, {\n    field: \"Percent\",\n    headerName: \"Percent Change\",\n    flex: 0.5,\n    type: \"number\"\n  }, {\n    field: \"open\",\n    headerName: \"Open\",\n    flex: 0.3,\n    type: \"number\"\n  }, {\n    field: \"high\",\n    headerName: \"High\",\n    flex: 0.3,\n    type: \"number\"\n  }, {\n    field: \"low\",\n    headerName: \"Low\",\n    flex: 0.3,\n    type: \"number\"\n  }, {\n    field: \"close\",\n    headerName: \"Close\",\n    flex: 0.3,\n    type: \"number\"\n  }, {\n    field: \"Buy\",\n    headerName: \"Buy\",\n    sortable: false,\n    renderCell: params => /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => history(\"/buyStock\", {\n        state: params.row\n      }),\n      variant: \"contained\",\n      color: \"success\",\n      children: \"Buy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 9\n    }, this)\n  }, {\n    field: \"Sell\",\n    headerName: \"Sell\",\n    sortable: false,\n    renderCell: params => /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => history(\"/sellStock\", {\n        state: params.row\n      }),\n      variant: \"outlined\",\n      color: \"error\",\n      children: \"Sell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 9\n    }, this)\n  }, {\n    field: \"Delete\",\n    headerName: \"Delete\",\n    sortable: false,\n    renderCell: params => /*#__PURE__*/_jsxDEV(DeleteIcon, {\n      onClick: () => deleteRow(params.row.id),\n      style: {\n        cursor: \"pointer\",\n        color: \"red\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 9\n    }, this)\n  }, {\n    field: \"Details\",\n    headerName: \"Details\",\n    sortable: false,\n    renderCell: params => /*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {\n      onClick: () => history(\"/details\", {\n        state: params.row\n      }),\n      style: {\n        cursor: \"pointer\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 9\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    m: \"20px\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Watchlist\",\n      subtitle: \"Watchlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      m: \"40px 0 0 0\",\n      height: \"75vh\",\n      sx: {\n        \"& .MuiDataGrid-root\": {\n          border: \"none\"\n        },\n        \"& .MuiDataGrid-cell\": {\n          borderBottom: \"none\"\n        },\n        \"& .name-column--cell\": {\n          color: colors.greenAccent[300]\n        },\n        \"& .MuiDataGrid-columnHeaders\": {\n          backgroundColor: colors.blueAccent[700],\n          borderBottom: \"none\"\n        },\n        \"& .MuiDataGrid-virtualScroller\": {\n          backgroundColor: colors.primary[400]\n        },\n        \"& .MuiDataGrid-footerContainer\": {\n          borderTop: \"none\",\n          backgroundColor: colors.blueAccent[700]\n        },\n        \"& .MuiCheckbox-root\": {\n          color: `${colors.greenAccent[200]} !important`\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns,\n        components: {\n          Toolbar: GridToolbar\n        },\n        loading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 499,\n    columnNumber: 5\n  }, this);\n};\n_s(Watchlist, \"OAs+Jndw8VVIn2fook3ZK5YrbbI=\", false, function () {\n  return [useNavigate, useTheme];\n});\n_c = Watchlist;\nexport default Watchlist;\nvar _c;\n$RefreshReg$(_c, \"Watchlist\");","map":{"version":3,"names":["Box","Typography","Button","DataGrid","GridToolbar","tokens","useTheme","Icon","AdminPanelSettingsOutlinedIcon","LockOpenOutlinedIcon","SecurityOutlinedIcon","DeleteIcon","Header","AddCircleOutlineIcon","React","useEffect","useState","useNavigate","axios","db","collection","getDocs","doc","deleteDoc","jsxDEV","_jsxDEV","Watchlist","_s","user","JSON","parse","localStorage","getItem","userId","uid","rows","setRows","isLoading","setIsLoading","history","theme","colors","palette","mode","fetchData","console","error","watchlistRef","snapshot","watchlistData","Promise","all","docs","map","item","id","data","stockUrl","symbol","stockResponse","get","stockData","name","today","c","Percent","dp","open","o","high","h","low","l","close","pc","deleteRow","filter","row","columns","field","headerName","flex","type","sortable","renderCell","params","onClick","state","variant","color","children","fileName","_jsxFileName","lineNumber","columnNumber","style","cursor","m","title","subtitle","height","sx","border","borderBottom","greenAccent","backgroundColor","blueAccent","primary","borderTop","components","Toolbar","loading","_c","$RefreshReg$"],"sources":["C:/Users/kbito/Documents/School/ACT/ACT/Frontend/src/scenes/dashboard/watchlist.js"],"sourcesContent":["// import { Box, Typography, useTheme, Button } from \"@mui/material\";\r\n// import { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\r\n// import { tokens } from \"../../theme\";\r\n// import Icon from \"@mui/material/Icon\";\r\n// import { mockDataTeam } from \"../../data/mockData\";\r\n// import AdminPanelSettingsOutlinedIcon from \"@mui/icons-material/AdminPanelSettingsOutlined\";\r\n// import LockOpenOutlinedIcon from \"@mui/icons-material/LockOpenOutlined\";\r\n// import SecurityOutlinedIcon from \"@mui/icons-material/SecurityOutlined\";\r\n// import DeleteIcon from \"@mui/icons-material/Delete\";\r\n// import Header from \"../../components/Headers\";\r\n// // import { abc } from \"../../mockData\";\r\n// import { useEffect, useState, useCallback } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// // import { useAuthContext } from \"../../hooks/useAuthContext.jsx\";\r\n// import AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\r\n// import { CleaningServices } from \"@mui/icons-material\";\r\n// import React from \"react\";\r\n\r\n// const Watchlist = () => {\r\n//   // const { user } = useAuthContext();\r\n//   const user = JSON.parse(localStorage.getItem(\"user\"));\r\n//   // console.log(user);\r\n//   const history = useNavigate();\r\n//   // const [abc, setAbc] = useState([]);\r\n//   const [rows, setRows] = useState([]);\r\n\r\n//   // const [rows: GridRowsProp, setRows] = React.useState([]);\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n\r\n//   const url = \"http://localhost:8080/temp/\".concat(user.id);\r\n//   // console.log(url);\r\n\r\n//   const fetchData = async () => {\r\n//     let abc = [];\r\n//     const temp = [];\r\n\r\n//     await fetch(url)\r\n//       .then((response) => response.json())\r\n//       // .then((response) => setAbc(response));\r\n//       .then((response) => {\r\n//         response.map((d) => abc.push(d));\r\n//       });\r\n//     // console.log(abc);\r\n//     for (var key in abc) {\r\n//       if (!abc.hasOwnProperty(key)) continue;\r\n//       let newData = [];\r\n//       const url = \"https://finnhub.io/api/v1/quote?symbol=\".concat(\r\n//         abc[key].symbol,\r\n//         \"&token=ce80b8aad3i4pjr4v2ggce80b8aad3i4pjr4v2h0\"\r\n//       );\r\n//       await axios\r\n//         .get(url)\r\n//         .then((res) => {\r\n//           const pData = res.data;\r\n//           newData.push(pData);\r\n//         })\r\n//         .catch((err) => {\r\n//           console.log(err);\r\n//         });\r\n//       // console.log(newData);\r\n\r\n//       const ab = {\r\n//         id: abc[key]._id,\r\n//         name: abc[key].name,\r\n//         symbol: abc[key].symbol,\r\n//         delete: abc[key]._id,\r\n//         ids: abc[key]._id,\r\n//         today: newData[0][\"c\"],\r\n//         Percent: newData[0][\"dp\"] + \" %\",\r\n//         open: newData[0][\"o\"],\r\n//         high: newData[0][\"h\"],\r\n//         low: newData[0][\"l\"],\r\n//         close: newData[0][\"pc\"],\r\n//       };\r\n//       // console.log(pData[key].name)\r\n//       let flag = false;\r\n//       for (var k in temp) {\r\n//         if (temp[k].symbol === abc[key].symbol) {\r\n//           flag = true;\r\n//         }\r\n//       }\r\n//       if (!flag) {\r\n//         temp.push(ab);\r\n//       }\r\n//     }\r\n//     console.log(temp);\r\n//     const s = new Set(temp);\r\n//     // console.log(s);\r\n//     setRows(Array.from(s));\r\n//     // setIsLoading(false);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // abc = [];\r\n//     // temp = [];\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const theme = useTheme();\r\n//   const colors = tokens(theme.palette.mode);\r\n//   const columns = [\r\n//     {\r\n//       field: \"name\",\r\n//       headerName: \" Company Name\",\r\n//       flex: 1,\r\n//       cellClassName: \"name-column--cell\",\r\n//     },\r\n//     {\r\n//       field: \"symbol\",\r\n//       headerName: \"Symbol\",\r\n//       flex: 0.5,\r\n//       cellClassName: \"symbol-column--cell\",\r\n//     },\r\n//     {\r\n//       field: \"ids\",\r\n//       headerName: \"ids\",\r\n//       hide: true,\r\n//       flex: 0.5,\r\n\r\n//       cellClassName: \"symbol-column--cell\",\r\n//     },\r\n\r\n//     {\r\n//       field: \"today\",\r\n//       headerName: \"Current Price\",\r\n//       flex: 0.5,\r\n//       type: \"number\",\r\n//       headerAlign: \"left\",\r\n//       align: \"left\",\r\n//     },\r\n//     {\r\n//       field: \"Percent\",\r\n//       headerName: \"Percent Chamge\",\r\n//       flex: 0.5,\r\n//       type: \"number\",\r\n//       headerAlign: \"left\",\r\n//       align: \"left\",\r\n//     },\r\n//     {\r\n//       field: \"open\",\r\n//       headerName: \"Open\",\r\n//       flex: 0.3,\r\n//       type: \"number\",\r\n//       headerAlign: \"left\",\r\n//       align: \"left\",\r\n//     },\r\n//     {\r\n//       field: \"high\",\r\n//       headerName: \"High\",\r\n//       flex: 0.3,\r\n//       type: \"number\",\r\n//       headerAlign: \"left\",\r\n//       align: \"left\",\r\n//     },\r\n//     {\r\n//       field: \"low\",\r\n//       headerName: \"Low\",\r\n//       flex: 0.3,\r\n//       type: \"number\",\r\n//       headerAlign: \"left\",\r\n//       align: \"left\",\r\n//     },\r\n//     {\r\n//       field: \"close\",\r\n//       headerName: \"Close\",\r\n//       flex: 0.3,\r\n//       type: \"number\",\r\n//       headerAlign: \"left\",\r\n//       align: \"left\",\r\n//     },\r\n\r\n//     {\r\n//       field: \"Buy\",\r\n//       headerName: \"Buy\",\r\n//       sortable: false,\r\n//       renderCell: (params) => {\r\n//         const Add = (e) => {\r\n//           e.stopPropagation(); // don't select this row after clicking\r\n\r\n//           const api: GridApi = params.api;\r\n//           const thisRow: Record<string, GridCellValue> = {};\r\n\r\n//           api\r\n//             .getAllColumns()\r\n//             .filter((c) => c.field !== \"__check__\" && !!c)\r\n//             .forEach(\r\n//               (c) => (thisRow[c.field] = params.getValue(params.id, c.field))\r\n//             );\r\n//           console.log(thisRow);\r\n//           history(\"/buyStock\", { state: thisRow });\r\n//           return;\r\n//         };\r\n\r\n//         return (\r\n//           <Button onClick={Add} variant=\"contained\" color=\"success\">\r\n//             Buy\r\n//           </Button>\r\n//         );\r\n//       },\r\n//     },\r\n//     {\r\n//       field: \"Sell\",\r\n//       headerName: \"Sell\",\r\n//       sortable: false,\r\n//       renderCell: (params) => {\r\n//         const Remove = (e) => {\r\n//           e.stopPropagation(); // don't select this row after clicking\r\n\r\n//           const api: GridApi = params.api;\r\n//           const thisRow: Record<string, GridCellValue> = {};\r\n\r\n//           api\r\n//             .getAllColumns()\r\n//             .filter((c) => c.field !== \"__check__\" && !!c)\r\n//             .forEach(\r\n//               (c) => (thisRow[c.field] = params.getValue(params.id, c.field))\r\n//             );\r\n\r\n//           // return alert(JSON.stringify(thisRow.name, null, 4));\r\n//           // return;\r\n//           console.log(thisRow);\r\n//           history(\"/sellStock\", { state: thisRow });\r\n//         };\r\n\r\n//         return (\r\n//           <Button onClick={Remove} variant=\"outlined\" color=\"error\">\r\n//             Sell\r\n//           </Button>\r\n//         );\r\n//       },\r\n//     },\r\n\r\n//     {\r\n//       field: \"Delete\",\r\n//       headerName: \"Delete\",\r\n\r\n//       sortable: false,\r\n//       renderCell: (params) => {\r\n//         const Delete = (e) => {\r\n//           e.stopPropagation(); // don't select this row after clicking\r\n\r\n//           const api: GridApi = params.api;\r\n//           const thisRow: Record<string, GridCellValue> = {};\r\n\r\n//           api\r\n//             .getAllColumns()\r\n//             .filter((c) => c.field !== \"__check__\" && !!c)\r\n//             .forEach(\r\n//               (c) => (thisRow[c.field] = params.getValue(params.id, c.field))\r\n//             );\r\n\r\n//           async function deleteRow() {\r\n//             await fetch(\"http://localhost:8080/temp/\".concat(thisRow.ids), {\r\n//               method: \"DELETE\",\r\n//             });\r\n//             for (var key in rows) {\r\n//               const a = rows[key];\r\n//               setRows((rows) => rows.filter((a) => a.ids != thisRow.ids));\r\n//             }\r\n//           }\r\n//           deleteRow();\r\n\r\n//           // console.log(thisRow);\r\n//           // return alert(\r\n//           //   JSON.stringify(thisRow.symbol, null, 4) + \" \" + \"Deleted\"\r\n//           // );\r\n//           // //\r\n//         };\r\n\r\n//         return <DeleteIcon onClick={Delete}></DeleteIcon>;\r\n//       },\r\n//     },\r\n//     {\r\n//       field: \"Details\",\r\n//       headerName: \"Details\",\r\n//       sortable: false,\r\n//       renderCell: (params) => {\r\n//         const Details = (e) => {\r\n//           e.stopPropagation(); // don't select this row after clicking\r\n\r\n//           const api: GridApi = params.api;\r\n//           const thisRow: Record<string, GridCellValue> = {};\r\n\r\n//           api\r\n//             .getAllColumns()\r\n//             .filter((c) => c.field !== \"__check__\" && !!c)\r\n//             .forEach(\r\n//               (c) => (thisRow[c.field] = params.getValue(params.id, c.field))\r\n//             );\r\n//           // console.log(thisRow);\r\n//           history(\"/details\", { state: thisRow });\r\n//           return;\r\n//         };\r\n\r\n//         return <AddCircleOutlineIcon onClick={Details}></AddCircleOutlineIcon>;\r\n//       },\r\n//     },\r\n//   ];\r\n\r\n//   return (\r\n//     <>\r\n//       {/* {isLoading && <h1>Loading Data...</h1>} */}\r\n//       <Box m=\"20px\">\r\n//         {/* <Header title=\"Watchlist\" /> */}\r\n//         <Header title=\"Watchlist\" subtitle=\"Watchlist\" />\r\n//         <Box\r\n//           m=\"40px 0 0 0\"\r\n//           height=\"75vh\"\r\n//           sx={{\r\n//             \"& .MuiDataGrid-root\": {\r\n//               border: \"none\",\r\n//             },\r\n//             \"& .MuiDataGrid-cell\": {\r\n//               borderBottom: \"none\",\r\n//             },\r\n//             \"& .name-column--cell\": {\r\n//               color: colors.greenAccent[300],\r\n//             },\r\n//             \"& .MuiDataGrid-columnHeaders\": {\r\n//               backgroundColor: colors.blueAccent[700],\r\n//               borderBottom: \"none\",\r\n//             },\r\n//             \"& .MuiDataGrid-virtualScroller\": {\r\n//               backgroundColor: colors.primary[400],\r\n//             },\r\n//             \"& .MuiDataGrid-footerContainer\": {\r\n//               borderTop: \"none\",\r\n//               backgroundColor: colors.blueAccent[700],\r\n//             },\r\n//             \"& .MuiCheckbox-root\": {\r\n//               color: `${colors.greenAccent[200]} !important`,\r\n//             },\r\n//           }}\r\n//         >\r\n//           {rows && (\r\n//             <DataGrid\r\n//               rows={rows}\r\n//               columns={columns}\r\n//               components={{ Toolbar: GridToolbar }}\r\n//             />\r\n//           )}\r\n//         </Box>\r\n//       </Box>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Watchlist;\r\n\r\n\r\n\r\n\r\n//FIREBASE SETUP\r\nimport { Box, Typography, Button } from \"@mui/material\";\r\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\r\nimport { tokens } from \"../../theme\";\r\nimport { useTheme } from \"@mui/material\"; // Ensure this is imported\r\nimport Icon from \"@mui/material/Icon\";\r\nimport AdminPanelSettingsOutlinedIcon from \"@mui/icons-material/AdminPanelSettingsOutlined\";\r\nimport LockOpenOutlinedIcon from \"@mui/icons-material/LockOpenOutlined\";\r\nimport SecurityOutlinedIcon from \"@mui/icons-material/SecurityOutlined\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport Header from \"../../components/Headers\";\r\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { db } from \"../../firebaseConfig\"; // Import Firebase client config here\r\nimport { collection, getDocs, doc, deleteDoc } from \"firebase/firestore\"; // Firestore functions\r\n\r\nconst Watchlist = () => {\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  const userId = user && user.uid;  // Assuming `uid` is used instead of `id` for Firebase users\r\n  const [rows, setRows] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const history = useNavigate();\r\n  const theme = useTheme();\r\n  const colors = tokens(theme.palette.mode);\r\n\r\n  const fetchData = async () => {\r\n    if (!userId) {\r\n      console.error(\"User ID is undefined\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const watchlistRef = collection(db, \"temp\");\r\n      const snapshot = await getDocs(watchlistRef);\r\n      \r\n      const watchlistData = await Promise.all(\r\n        snapshot.docs.map(async (doc) => {\r\n          const item = { id: doc.id, ...doc.data() };\r\n          \r\n          // Fetch live stock data using the stock symbol\r\n          const stockUrl = `https://finnhub.io/api/v1/quote?symbol=${item.symbol}&token=your_finnhub_api_key`;\r\n          const stockResponse = await axios.get(stockUrl);\r\n          const stockData = stockResponse.data;\r\n\r\n          return {\r\n            id: item.id,\r\n            name: item.name,\r\n            symbol: item.symbol,\r\n            today: stockData.c,\r\n            Percent: stockData.dp + \" %\",\r\n            open: stockData.o,\r\n            high: stockData.h,\r\n            low: stockData.l,\r\n            close: stockData.pc,\r\n          };\r\n        })\r\n      );\r\n\r\n      setRows(watchlistData);\r\n    } catch (error) {\r\n      console.error(\"Error fetching watchlist data from Firebase:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Function to delete an item from Firestore\r\n  const deleteRow = async (id) => {\r\n    try {\r\n      await deleteDoc(doc(db, \"temp\", id));\r\n      setRows(rows.filter((row) => row.id !== id));\r\n    } catch (error) {\r\n      console.error(\"Error deleting item:\", error);\r\n    }\r\n  };\r\n\r\n  // Columns definition remains the same\r\n  const columns = [\r\n    { field: \"name\", headerName: \"Company Name\", flex: 1 },\r\n    { field: \"symbol\", headerName: \"Symbol\", flex: 0.5 },\r\n    { field: \"today\", headerName: \"Current Price\", flex: 0.5, type: \"number\" },\r\n    { field: \"Percent\", headerName: \"Percent Change\", flex: 0.5, type: \"number\" },\r\n    { field: \"open\", headerName: \"Open\", flex: 0.3, type: \"number\" },\r\n    { field: \"high\", headerName: \"High\", flex: 0.3, type: \"number\" },\r\n    { field: \"low\", headerName: \"Low\", flex: 0.3, type: \"number\" },\r\n    { field: \"close\", headerName: \"Close\", flex: 0.3, type: \"number\" },\r\n    {\r\n      field: \"Buy\",\r\n      headerName: \"Buy\",\r\n      sortable: false,\r\n      renderCell: (params) => (\r\n        <Button\r\n          onClick={() => history(\"/buyStock\", { state: params.row })}\r\n          variant=\"contained\"\r\n          color=\"success\"\r\n        >\r\n          Buy\r\n        </Button>\r\n      ),\r\n    },\r\n    {\r\n      field: \"Sell\",\r\n      headerName: \"Sell\",\r\n      sortable: false,\r\n      renderCell: (params) => (\r\n        <Button\r\n          onClick={() => history(\"/sellStock\", { state: params.row })}\r\n          variant=\"outlined\"\r\n          color=\"error\"\r\n        >\r\n          Sell\r\n        </Button>\r\n      ),\r\n    },\r\n    {\r\n      field: \"Delete\",\r\n      headerName: \"Delete\",\r\n      sortable: false,\r\n      renderCell: (params) => (\r\n        <DeleteIcon\r\n          onClick={() => deleteRow(params.row.id)}\r\n          style={{ cursor: \"pointer\", color: \"red\" }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      field: \"Details\",\r\n      headerName: \"Details\",\r\n      sortable: false,\r\n      renderCell: (params) => (\r\n        <AddCircleOutlineIcon\r\n          onClick={() => history(\"/details\", { state: params.row })}\r\n          style={{ cursor: \"pointer\" }}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Box m=\"20px\">\r\n      <Header title=\"Watchlist\" subtitle=\"Watchlist\" />\r\n      <Box\r\n        m=\"40px 0 0 0\"\r\n        height=\"75vh\"\r\n        sx={{\r\n          \"& .MuiDataGrid-root\": { border: \"none\" },\r\n          \"& .MuiDataGrid-cell\": { borderBottom: \"none\" },\r\n          \"& .name-column--cell\": { color: colors.greenAccent[300] },\r\n          \"& .MuiDataGrid-columnHeaders\": { backgroundColor: colors.blueAccent[700], borderBottom: \"none\" },\r\n          \"& .MuiDataGrid-virtualScroller\": { backgroundColor: colors.primary[400] },\r\n          \"& .MuiDataGrid-footerContainer\": { borderTop: \"none\", backgroundColor: colors.blueAccent[700] },\r\n          \"& .MuiCheckbox-root\": { color: `${colors.greenAccent[200]} !important` },\r\n        }}\r\n      >\r\n        <DataGrid\r\n          rows={rows}\r\n          columns={columns}\r\n          components={{ Toolbar: GridToolbar }}\r\n          loading={isLoading}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Watchlist;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
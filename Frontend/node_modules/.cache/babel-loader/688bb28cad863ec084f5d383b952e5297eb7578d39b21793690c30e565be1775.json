{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useState } from 'react';\n// import { useAuthContext } from './useAuthContext.jsx';\n\n// export const useLogin = () =>{\n//     const [error, setError] = useState(null);\n//     const [isLoading, setIsLoading] = useState(null);\n//     const { dispatch } = useAuthContext();\n\n//     const login = async (email, password) =>{\n//         setIsLoading(true)\n//         setError(null)\n\n//         const url = \"http://localhost:8080/user/login/\";\n//         const response = await fetch (url, {\n//             method: 'POST',\n//             headers:{'Content-Type':'application/json'},\n//             body: JSON.stringify({email, password})\n//         })\n//         const json = await response.json()\n\n//         if(!response.ok){\n//             setIsLoading(false)\n//             setError(json.error)\n//             return false;\n//         }\n//         if(response.ok){\n//             // save the user to local browser storage\n//             localStorage.setItem('user',JSON.stringify(json))\n\n//             // Update the auth context\n//             dispatch({type:'LOGIN', payload: json});\n//             setIsLoading(false);\n//             return true;\n//         }\n\n//     }\n//     return ({ login,  error, isLoading });\n// };\n\n// LULU'S FIRBASE SETUP\nimport { useState } from 'react';\nimport { useAuthContext } from './useAuthContext.jsx';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\n// import { auth } from '../firebaseConfig'; // Import the Firebase Auth instance\nimport { auth, db } from '../firebaseConfig'; // import your initialized Firebase auth and db\n\nexport const useLogin = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    dispatch\n  } = useAuthContext();\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // Save user details in local storage\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // Update auth context\n      dispatch({\n        type: 'LOGIN',\n        payload: user\n      });\n      setIsLoading(false);\n      return true;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      return false;\n    }\n  };\n  return {\n    login,\n    error,\n    isLoading\n  };\n};\n\n// // KRIS FIREBASE SETUP\n// import { useState } from \"react\";\n\n// export const useLogin = () => {\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const login = async (email, password) => {\n//     setIsLoading(true);\n//     setError(null);\n\n//     try {\n//       // Replace with your backend URL\n//       const response = await fetch(\"https://act-production-5e24.up.railway.app/api/auth/login\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ email, password }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Login failed\");\n//       }\n\n//       const data = await response.json();\n//       localStorage.setItem(\"token\", data.token);\n\n//       setIsLoading(false);\n//       return true;\n//     } catch (error) {\n//       setIsLoading(false);\n//       setError(error.message);\n//       return false;\n//     }\n//   };\n\n//   return { login, error, isLoading };\n// };\n_s(useLogin, \"leglVsSbW4DJnC7nVdCyJFB0GD8=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useState","useAuthContext","signInWithEmailAndPassword","auth","db","useLogin","_s","error","setError","isLoading","setIsLoading","dispatch","login","email","password","userCredential","user","localStorage","setItem","JSON","stringify","type","payload","err","message"],"sources":["C:/Users/kbito/Documents/School/ACT/ACT/Frontend/src/hooks/useLogin.jsx"],"sourcesContent":["// import { useState } from 'react';\r\n// import { useAuthContext } from './useAuthContext.jsx';\r\n\r\n// export const useLogin = () =>{\r\n//     const [error, setError] = useState(null);\r\n//     const [isLoading, setIsLoading] = useState(null);\r\n//     const { dispatch } = useAuthContext();\r\n\r\n//     const login = async (email, password) =>{\r\n//         setIsLoading(true)\r\n//         setError(null)\r\n        \r\n\r\n//         const url = \"http://localhost:8080/user/login/\";\r\n//         const response = await fetch (url, {\r\n//             method: 'POST',\r\n//             headers:{'Content-Type':'application/json'},\r\n//             body: JSON.stringify({email, password})\r\n//         })\r\n//         const json = await response.json()\r\n\r\n//         if(!response.ok){\r\n//             setIsLoading(false)\r\n//             setError(json.error)\r\n//             return false;\r\n//         }\r\n//         if(response.ok){\r\n//             // save the user to local browser storage\r\n//             localStorage.setItem('user',JSON.stringify(json))\r\n\r\n//             // Update the auth context\r\n//             dispatch({type:'LOGIN', payload: json});\r\n//             setIsLoading(false);\r\n//             return true;\r\n//         }\r\n\r\n//     }\r\n//     return ({ login,  error, isLoading });\r\n// };\r\n\r\n\r\n\r\n// LULU'S FIRBASE SETUP\r\nimport { useState } from 'react';\r\nimport { useAuthContext } from './useAuthContext.jsx';\r\nimport { signInWithEmailAndPassword } from 'firebase/auth';\r\n// import { auth } from '../firebaseConfig'; // Import the Firebase Auth instance\r\nimport { auth, db } from '../firebaseConfig'; // import your initialized Firebase auth and db\r\n\r\n\r\nexport const useLogin = () => {\r\n    const [error, setError] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const { dispatch } = useAuthContext();\r\n\r\n    const login = async (email, password) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n\r\n            // Save user details in local storage\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n\r\n            // Update auth context\r\n            dispatch({ type: 'LOGIN', payload: user });\r\n            setIsLoading(false);\r\n            return true;\r\n        } catch (err) {\r\n            setError(err.message);\r\n            setIsLoading(false);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    return { login, error, isLoading };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // KRIS FIREBASE SETUP\r\n// import { useState } from \"react\";\r\n\r\n// export const useLogin = () => {\r\n//   const [error, setError] = useState(null);\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n\r\n//   const login = async (email, password) => {\r\n//     setIsLoading(true);\r\n//     setError(null);\r\n\r\n//     try {\r\n//       // Replace with your backend URL\r\n//       const response = await fetch(\"https://act-production-5e24.up.railway.app/api/auth/login\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({ email, password }),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Login failed\");\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       localStorage.setItem(\"token\", data.token);\r\n\r\n//       setIsLoading(false);\r\n//       return true;\r\n//     } catch (error) {\r\n//       setIsLoading(false);\r\n//       setError(error.message);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   return { login, error, isLoading };\r\n// };\r\n\r\n\r\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,0BAA0B,QAAQ,eAAe;AAC1D;AACA,SAASC,IAAI,EAAEC,EAAE,QAAQ,mBAAmB,CAAC,CAAC;;AAG9C,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAEW;EAAS,CAAC,GAAGV,cAAc,CAAC,CAAC;EAErC,MAAMW,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACrCJ,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACA,MAAMO,cAAc,GAAG,MAAMb,0BAA0B,CAACC,IAAI,EAAEU,KAAK,EAAEC,QAAQ,CAAC;MAC9E,MAAME,IAAI,GAAGD,cAAc,CAACC,IAAI;;MAEhC;MACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;;MAElD;MACAL,QAAQ,CAAC;QAAEU,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAEN;MAAK,CAAC,CAAC;MAC1CN,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO,IAAI;IACf,CAAC,CAAC,OAAOa,GAAG,EAAE;MACVf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACrBd,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO,KAAK;IAChB;EACJ,CAAC;EAED,OAAO;IAAEE,KAAK;IAAEL,KAAK;IAAEE;EAAU,CAAC;AACtC,CAAC;;AAcD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAAH,EAAA,CAhFaD,QAAQ;EAAA,QAGIJ,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
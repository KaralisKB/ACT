{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useState } from 'react';\n// import { useAuthContext } from './useAuthContext.jsx';\n\n// export const useSignup = () =>{\n//     const [error, setError] = useState(null);\n//     const [isLoading, setIsLoading] = useState(null);\n//     const { dispatch } = useAuthContext();\n\n//     const signup = async (firstName, lastName, email, password) =>{\n//         setIsLoading(true)\n//         setError(null)\n\n//         const url = \"http://localhost:8080/user/signup/\";\n//         const response = await fetch (url, {\n//             method: 'POST',\n//             headers:{'Content-Type':'application/json'},\n//             body: JSON.stringify({firstName, lastName, email, password})\n//         })\n//         const json = await response.json()\n\n//         if(!response.ok){\n//             setIsLoading(false)\n//             setError(json.error)\n//             return false;\n//         }\n//         if(response.ok){\n//             // save the user to local browser storage\n//             localStorage.setItem('user',JSON.stringify(json))\n\n//             // Update the auth context\n//             dispatch({type:'LOGIN', payload: json});\n//             setIsLoading(false);\n//             return true;\n//         }\n//     }\n//     return ({ signup,  error, isLoading });\n// };\n\n// FIREBASE SETUP \nimport { useState } from 'react';\nimport { useAuthContext } from './useAuthContext.jsx';\nimport { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';\nimport { auth } from '../firebaseConfig'; // Import the Firebase Auth instance\n\nexport const useSignup = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    dispatch\n  } = useAuthContext();\n  const signup = async (firstName, lastName, email, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Register the user with email and password\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // Update the user's display name in Firebase\n      await updateProfile(user, {\n        displayName: `${firstName} ${lastName}`\n      });\n\n      // Save user details in local storage\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // Update auth context\n      dispatch({\n        type: 'LOGIN',\n        payload: user\n      });\n      setIsLoading(false);\n      return true;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      return false;\n    }\n  };\n  return {\n    signup,\n    error,\n    isLoading\n  };\n};\n_s(useSignup, \"leglVsSbW4DJnC7nVdCyJFB0GD8=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useState","useAuthContext","createUserWithEmailAndPassword","updateProfile","auth","useSignup","_s","error","setError","isLoading","setIsLoading","dispatch","signup","firstName","lastName","email","password","userCredential","user","displayName","localStorage","setItem","JSON","stringify","type","payload","err","message"],"sources":["C:/Users/kbito/Documents/School/ACT/ACT/Frontend/src/hooks/useSignup.jsx"],"sourcesContent":["// import { useState } from 'react';\r\n// import { useAuthContext } from './useAuthContext.jsx';\r\n\r\n// export const useSignup = () =>{\r\n//     const [error, setError] = useState(null);\r\n//     const [isLoading, setIsLoading] = useState(null);\r\n//     const { dispatch } = useAuthContext();\r\n\r\n//     const signup = async (firstName, lastName, email, password) =>{\r\n//         setIsLoading(true)\r\n//         setError(null)\r\n        \r\n\r\n//         const url = \"http://localhost:8080/user/signup/\";\r\n//         const response = await fetch (url, {\r\n//             method: 'POST',\r\n//             headers:{'Content-Type':'application/json'},\r\n//             body: JSON.stringify({firstName, lastName, email, password})\r\n//         })\r\n//         const json = await response.json()\r\n\r\n//         if(!response.ok){\r\n//             setIsLoading(false)\r\n//             setError(json.error)\r\n//             return false;\r\n//         }\r\n//         if(response.ok){\r\n//             // save the user to local browser storage\r\n//             localStorage.setItem('user',JSON.stringify(json))\r\n\r\n//             // Update the auth context\r\n//             dispatch({type:'LOGIN', payload: json});\r\n//             setIsLoading(false);\r\n//             return true;\r\n//         }\r\n//     }\r\n//     return ({ signup,  error, isLoading });\r\n// };\r\n\r\n\r\n\r\n// FIREBASE SETUP \r\nimport { useState } from 'react';\r\nimport { useAuthContext } from './useAuthContext.jsx';\r\nimport { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';\r\nimport { auth } from '../firebaseConfig'; // Import the Firebase Auth instance\r\n\r\nexport const useSignup = () => {\r\n    const [error, setError] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const { dispatch } = useAuthContext();\r\n\r\n    const signup = async (firstName, lastName, email, password) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            // Register the user with email and password\r\n            const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n            const user = userCredential.user;\r\n\r\n            // Update the user's display name in Firebase\r\n            await updateProfile(user, {\r\n                displayName: `${firstName} ${lastName}`\r\n            });\r\n\r\n            // Save user details in local storage\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n\r\n            // Update auth context\r\n            dispatch({ type: 'LOGIN', payload: user });\r\n            setIsLoading(false);\r\n            return true;\r\n        } catch (err) {\r\n            setError(err.message);\r\n            setIsLoading(false);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    return { signup, error, isLoading };\r\n};\r\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,8BAA8B,EAAEC,aAAa,QAAQ,eAAe;AAC7E,SAASC,IAAI,QAAQ,mBAAmB,CAAC,CAAC;;AAE1C,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAEW;EAAS,CAAC,GAAGV,cAAc,CAAC,CAAC;EAErC,MAAMW,MAAM,GAAG,MAAAA,CAAOC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,KAAK;IAC3DN,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACA;MACA,MAAMS,cAAc,GAAG,MAAMf,8BAA8B,CAACE,IAAI,EAAEW,KAAK,EAAEC,QAAQ,CAAC;MAClF,MAAME,IAAI,GAAGD,cAAc,CAACC,IAAI;;MAEhC;MACA,MAAMf,aAAa,CAACe,IAAI,EAAE;QACtBC,WAAW,EAAE,GAAGN,SAAS,IAAIC,QAAQ;MACzC,CAAC,CAAC;;MAEF;MACAM,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,CAAC;;MAElD;MACAP,QAAQ,CAAC;QAAEa,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAEP;MAAK,CAAC,CAAC;MAC1CR,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO,IAAI;IACf,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACVlB,QAAQ,CAACkB,GAAG,CAACC,OAAO,CAAC;MACrBjB,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO,KAAK;IAChB;EACJ,CAAC;EAED,OAAO;IAAEE,MAAM;IAAEL,KAAK;IAAEE;EAAU,CAAC;AACvC,CAAC;AAACH,EAAA,CAlCWD,SAAS;EAAA,QAGGJ,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}